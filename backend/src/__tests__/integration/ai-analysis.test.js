const request = require('supertest');
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken');
const app = require('../../server');
const Project = require('../../models/Project');
const Image = require('../../models/Image');
const Feedback = require('../../models/Feedback');
const User = require('../../models/User');

describe('AI Analysis Integration', () => {
  let authToken;
  let testUser;
  let testProject;

  beforeAll(async () => {
    // Create test user
    testUser = new User({
      name: 'Test User',
      email: 'test@example.com',
      password: 'hashedpassword'
    });
    await testUser.save();

    // Generate auth token
    authToken = jwt.sign(
      { userId: testUser._id, email: testUser.email },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    // Create test project
    testProject = new Project({
      name: 'AI Test Project',
      description: 'Project for testing AI analysis',
      owner: testUser._id,
      settings: {
        aiProvider: 'openrouter',
        feedbackCategories: ['visualHierarchy', 'accessibility'],
        targetRoles: ['designer', 'reviewer']
      }
    });
    await testProject.save();
  });

  describe('POST /api/images/upload/:projectId', () => {
    it('should upload image and trigger AI analysis', async () => {
      // Mock a simple image file
      const imageBuffer = Buffer.from('fake-image-data');
      
      const response = await request(app)
        .post(`/api/images/upload/${testProject._id}`)
        .set('Authorization', `Bearer ${authToken}`)
        .attach('image', imageBuffer, 'test-image.jpg')
        .expect(201);

      expect(response.body.success).toBe(true);
      expect(response.body.image).toBeDefined();
      expect(response.body.image.filename).toBe('test-image.jpg');
    }, 30000); // Longer timeout for AI processing

    it('should validate image file type', async () => {
      const textBuffer = Buffer.from('not-an-image');
      
      await request(app)
        .post(`/api/images/upload/${testProject._id}`)
        .set('Authorization', `Bearer ${authToken}`)
        .attach('image', textBuffer, 'test.txt')
        .expect(400);
    });

    it('should require authentication', async () => {
      const imageBuffer = Buffer.from('fake-image-data');
      
      await request(app)
        .post(`/api/images/upload/${testProject._id}`)
        .attach('image', imageBuffer, 'test-image.jpg')
        .expect(401);
    });
  });

  describe('AI Feedback Generation', () => {
    it('should generate feedback for uploaded image', async () => {
      // Create a test image
      const testImage = new Image({
        filename: 'ai-test-image.jpg',
        originalName: 'ai-test-image.jpg',
        url: 'https://example.com/ai-test-image.jpg',
        projectId: testProject._id,
        uploadedBy: testUser._id,
        dimensions: { width: 1920, height: 1080 }
      });
      await testImage.save();

      // Simulate AI analysis (this would normally be triggered by the upload)
      // For testing, we'll create feedback manually to test the structure
      const feedback = new Feedback({
        imageId: testImage._id,
        projectId: testProject._id,
        category: 'visualHierarchy',
        severity: 'medium',
        title: 'AI Generated Feedback',
        description: 'This feedback was generated by AI analysis',
        coordinates: { x: 100, y: 200 },
        targetRoles: ['designer'],
        author: 'ai-system',
        aiMetadata: {
          model: 'gpt-4o-mini',
          confidence: 0.85,
          processingTime: 2.5
        }
      });
      await feedback.save();

      // Verify feedback was created
      const savedFeedback = await Feedback.findById(feedback._id);
      expect(savedFeedback).toBeDefined();
      expect(savedFeedback.title).toBe('AI Generated Feedback');
      expect(savedFeedback.aiMetadata.model).toBe('gpt-4o-mini');
    });
  });

  describe('Feedback Retrieval', () => {
    it('should retrieve feedback for an image', async () => {
      // Create test image and feedback
      const testImage = new Image({
        filename: 'retrieval-test.jpg',
        originalName: 'retrieval-test.jpg',
        url: 'https://example.com/retrieval-test.jpg',
        projectId: testProject._id,
        uploadedBy: testUser._id,
        dimensions: { width: 1920, height: 1080 }
      });
      await testImage.save();

      const feedback1 = new Feedback({
        imageId: testImage._id,
        projectId: testProject._id,
        category: 'visualHierarchy',
        severity: 'high',
        title: 'High Priority Issue',
        description: 'This is a high priority issue',
        coordinates: { x: 50, y: 100 },
        targetRoles: ['designer'],
        author: 'ai-system'
      });

      const feedback2 = new Feedback({
        imageId: testImage._id,
        projectId: testProject._id,
        category: 'accessibility',
        severity: 'medium',
        title: 'Accessibility Issue',
        description: 'This is an accessibility issue',
        coordinates: { x: 200, y: 300 },
        targetRoles: ['reviewer'],
        author: 'ai-system'
      });

      await feedback1.save();
      await feedback2.save();

      // Retrieve feedback
      const response = await request(app)
        .get(`/api/feedback/${testImage._id}`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.feedback).toHaveLength(2);
      expect(response.body.feedback[0].title).toBe('High Priority Issue');
      expect(response.body.feedback[1].title).toBe('Accessibility Issue');
    });
  });

  describe('Role-based Feedback Filtering', () => {
    it('should filter feedback by target roles', async () => {
      // Create test image
      const testImage = new Image({
        filename: 'role-test.jpg',
        originalName: 'role-test.jpg',
        url: 'https://example.com/role-test.jpg',
        projectId: testProject._id,
        uploadedBy: testUser._id,
        dimensions: { width: 1920, height: 1080 }
      });
      await testImage.save();

      // Create feedback for different roles
      const designerFeedback = new Feedback({
        imageId: testImage._id,
        projectId: testProject._id,
        category: 'visualHierarchy',
        severity: 'medium',
        title: 'Designer Feedback',
        description: 'For designers only',
        coordinates: { x: 100, y: 200 },
        targetRoles: ['designer'],
        author: 'ai-system'
      });

      const reviewerFeedback = new Feedback({
        imageId: testImage._id,
        projectId: testProject._id,
        category: 'accessibility',
        severity: 'high',
        title: 'Reviewer Feedback',
        description: 'For reviewers only',
        coordinates: { x: 300, y: 400 },
        targetRoles: ['reviewer'],
        author: 'ai-system'
      });

      await designerFeedback.save();
      await reviewerFeedback.save();

      // Test filtering by role
      const response = await request(app)
        .get(`/api/feedback/${testImage._id}?role=designer`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body.success).toBe(true);
      expect(response.body.feedback).toHaveLength(1);
      expect(response.body.feedback[0].title).toBe('Designer Feedback');
    });
  });
});
